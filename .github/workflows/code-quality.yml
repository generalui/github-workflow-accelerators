name: Code Quality
on:
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize]
  workflow_dispatch:
jobs:
  lint:
    name: Lint
    # The linting pipeline should not take more that 2 minutes.
    timeout-minutes: 2
    runs-on: ubuntu-latest
    steps:

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files_ignore: |
            .github/workflows/code-quality.yml
            .vscode/**/*
            doc_assets/**/*
            .gitignore
            .markdownlint*
            .tool-versions
            *.code-workspace
            *.md

      - name: Get changed Module name
        id: modules
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          modules=()
          for file in ${ALL_CHANGED_FILES}; do
            echo "${file} was changed"
            # Get the folder name (3rd from the root) of the changed file, this will be the module name.
            # ie '.github/action/job-info/action.yml' will be 'job-info'
            module_name=$(echo ${file} | cut -d'/' -f3)
            if [[ ! "${modules[@]}" =~ "${module_name}" ]]; then
              modules+=("${module_name}")
            fi
          done
          module_names_json=$(jq -c -n '$ARGS.positional' --args "${modules[@]}")
          echo "module_names=${module_names_json}" >> $GITHUB_OUTPUT

          echo "::group::Modules"
          echo "Modules:"
          echo "${modules[*]}"
          echo "::endgroup::"

          echo "::group::Module Names"
          echo "Module Names: ${module_names_json}"
          echo "::endgroup::"

      - name: Version and Release Setup
        run: |
          modules=($(jq -r '.[]' <<<'${{ steps.modules.outputs.module_names }}'))

          version_tags=""
          for module in "${modules[@]}"; do
            version=$(cat "${module}"/project.json | jq -r '.version')
            version_tag="${version}-${module}"
            version_tags="${version_tags},\"${version_tag}\""
          done

          version_tags="${version_tags:1}"
          echo "version_tags=[${version_tags}]" >> $GITHUB_OUTPUT

          echo "::group::Version Tags"
          echo "Version Tags: [${version_tags}]"
          echo "::endgroup::"
        shell: bash
        id: version

      - name: Check for Tag
        run: |
          tags=($(jq -r '.[]' <<<'${{ steps.version.outputs.version_tags }}'))

          for tag in "${tags[@]}"; do
            if git show-ref --tags --verify --quiet "refs/tags/${tag}"; then
                echo "The tag ${tag} already exists, ensure you have incremented the version in project.json."
                exit 1
            fi
          done
          echo "Proceeding."
        shell: bash

      - name: Get changed action files
        id: changed-actions
        uses: tj-actions/changed-files@v44
        with:
          files: |
            .github/actions/*.yaml
            .github/actions/*.yml
            .github/workflows/*.yaml
            .github/workflows/*.yml
            .github/workflows/code-quality.yml

      - name: Get changed script files
        id: changed-scripts
        uses: tj-actions/changed-files@v44
        with:
          files: |
            .github/actions/**/*.sh
            .github/workflows/**/*.sh
            .github/workflows/code-quality.yml

      - name: Get changed markdown files
        id: changed-markdown
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/*.md
            .github/workflows/code-quality.yml

      - name: actionlint
        if: steps.changed-actions.outputs.any_modified == 'true'
        id: actionlint  #optional, id required only when outputs are used in the workflow steps later
        uses: raven-actions/actionlint@v2
        # with:
          # matcher: false  # optional
          # cache: false  # optional
          # fail-on-error: false  # optional
          # files: ${{ steps.changed-actions.outputs.all_changed_files }} # "tests/*.yml, tests/*.yaml"  # optional, example on how to grab all .yml and .yaml files from the test directory
          # flags: "-ignore SC2086"  # optional

      - name: Run ShellCheck
        if: steps.changed-scripts.outputs.any_modified == 'true'
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          ignore_paths: >-
            .vscode

      - name: Lint all Documentation
        if: steps.changed-markdown.outputs.any_modified == 'true'
        uses: DavidAnson/markdownlint-cli2-action@v14
        with:
          globs: |
            **/*.md

      - name: Default Job Success
        if: steps.changed-markdown.outputs.any_modified != 'true' && steps.changed-scripts.outputs.any_modified != 'true' && steps.changed-actions.outputs.any_modified != 'true'
        run: exit 0
